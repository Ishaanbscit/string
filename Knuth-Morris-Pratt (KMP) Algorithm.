#include <iostream>
#include <vector>
using namespace std;

// Function to compute the LPS (Longest Prefix Suffix) array
void computeLPS(string &pat, vector<int> &LPS, int M) {
    int len = 0; // Length of the previous longest prefix suffix
    LPS[0] = 0;  // LPS[0] is always 0

    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            LPS[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = LPS[len - 1]; // Use the previously computed LPS value
            } else {
                LPS[i] = 0;
                i++;
            }
        }
    }
}

// Function to search for the pattern in the given text using the KMP algorithm
vector<int> search(string pat, string txt) {
    int N = txt.length(); // Length of the text
    int M = pat.length(); // Length of the pattern

    vector<int> result; // Vector to store the starting indices of matches

    // Create the LPS array to store the length of the longest prefix suffix
    vector<int> LPS(M, 0);
    computeLPS(pat, LPS, M);

    int i = 0; // Pointer for the text
    int j = 0; // Pointer for the pattern
    while (i < N) {
        if (txt[i] == pat[j]) {
            i++;
            j++;
        }

        if (j == M) { // A match is found
            result.push_back(i - M); // Store the index of the match
            j = LPS[j - 1];          // Use the LPS array to continue searching
        } else if (i < N && txt[i] != pat[j]) { // Mismatch after j matches
            if (j != 0) {
                j = LPS[j - 1]; // Use the LPS array to skip comparisons
            } else {
                i++;
            }
        }
    }

    return result; // Return the result array
}

// Main function to test the code
int main() {
    string txt = "ABABDABACDABABCABAB";
    string pat = "ABABCABAB";
    vector<int> result = search(pat, txt);

    // Output the result
    cout << "Pattern found at indices: ";
    for (int index : result) {
        cout << index << " ";
    }
    cout << endl;

    return 0;
}
